#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 4096

void copyFile(const char *sourcePath, const char *destinationPath) {
    // Open the source file for reading
    int sourceFile = open(sourcePath, O_RDONLY);
    if (sourceFile == -1) {
        perror("Error opening source file");
        exit(EXIT_FAILURE);
    }

    // Open the destination file for writing (create if it doesn't exist, truncate to zero length)
    int destinationFile = open(destinationPath, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (destinationFile == -1) {
        perror("Error opening destination file");
        close(sourceFile);
        exit(EXIT_FAILURE);
    }

    // Buffer for reading and writing data
    char buffer[BUFFER_SIZE];
    ssize_t bytesRead, bytesWritten;

    // Copy data from source to destination
    while ((bytesRead = read(sourceFile, buffer, sizeof(buffer))) > 0) {
        bytesWritten = write(destinationFile, buffer, bytesRead);
        if (bytesWritten != bytesRead) {
            perror("Error writing to destination file");
            close(sourceFile);
            close(destinationFile);
            exit(EXIT_FAILURE);
        }
    }

    // Check for read error
    if (bytesRead == -1) {
        perror("Error reading from source file");
        close(sourceFile);
        close(destinationFile);
        exit(EXIT_FAILURE);
    }

    // Close the files
    close(sourceFile);
    close(destinationFile);

    printf("File copied successfully.\n");
}

int main(int argc, char *argv[]) {
    // Check for correct number of arguments
    if (argc != 3) {
        fprintf(stderr, "Usage: %s source_file destination_file\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    const char *sourcePath = argv[1];
    const char *destinationPath = argv[2];

    copyFile(sourcePath, destinationPath);

    return 0;
}
