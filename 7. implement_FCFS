#include <stdio.h>

// Process structure
struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
};

// Function to calculate waiting time and turnaround time
void calculateTimes(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    // Waiting time for the first process is 0
    waitingTime[0] = 0;

    // Turnaround time for the first process is its burst time
    turnaroundTime[0] = processes[0].burstTime;

    // Calculate waiting time and turnaround time for the rest of the processes
    for (int i = 1; i < n; i++) {
        waitingTime[i] = turnaroundTime[i - 1];
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }
}

// Function to calculate average waiting time and average turnaround time
void calculateAverages(int waitingTime[], int turnaroundTime[], int n, float *averageWaitingTime, float *averageTurnaroundTime) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;

    // Calculate total waiting time and total turnaround time
    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    // Calculate average waiting time and average turnaround time
    *averageWaitingTime = (float)totalWaitingTime / n;
    *averageTurnaroundTime = (float)totalTurnaroundTime / n;
}

// Function to display the schedule and times
void displaySchedule(struct Process processes[], int n, int waitingTime[], int turnaroundTime) {
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].arrivalTime, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }
}

int main() {
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    // Arrays to store waiting time and turnaround time for each process
    int waitingTime[n];
    int turnaroundTime[n];

    // Calculate waiting time and turnaround time
    calculateTimes(processes, n, waitingTime, turnaroundTime);

    // Display schedule and times
    printf("\nFCFS Schedule:\n");
    displaySchedule(processes, n, waitingTime, turnaroundTime);

    // Calculate and display average waiting time and average turnaround time
    float averageWaitingTime, averageTurnaroundTime;
    calculateAverages(waitingTime, turnaroundTime, n, &averageWaitingTime, &averageTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);

    return 0;
}
