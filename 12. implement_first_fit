#include <stdio.h>
#include <stdlib.h>

// Structure to represent a memory block
struct MemoryBlock {
    int size;
    int allocated;
};

// Function to initialize memory
void initializeMemory(struct MemoryBlock *memory, int numBlocks) {
    for (int i = 0; i < numBlocks; i++) {
        memory[i].size = 0;
        memory[i].allocated = 0;
    }
}

// Function to display the current state of memory
void displayMemory(struct MemoryBlock *memory, int numBlocks) {
    printf("Memory:\n");
    for (int i = 0; i < numBlocks; i++) {
        printf("[%d] Size: %d, Allocated: %d\n", i, memory[i].size, memory[i].allocated);
    }
    printf("\n");
}

// Function to allocate memory using First Fit strategy
void firstFit(struct MemoryBlock *memory, int numBlocks, int processSize) {
    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            memory[i].allocated = 1;
            printf("Process of size %d allocated in block %d using First Fit\n", processSize, i);
            return;
        }
    }
    printf("Process of size %d cannot be allocated using First Fit\n", processSize);
}

// Function to allocate memory using Best Fit strategy
void bestFit(struct MemoryBlock *memory, int numBlocks, int processSize) {
    int bestFitIndex = -1;
    int bestFitSize = INT_MAX;

    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (memory[i].size < bestFitSize) {
                bestFitSize = memory[i].size;
                bestFitIndex = i;
            }
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].allocated = 1;
        printf("Process of size %d allocated in block %d using Best Fit\n", processSize, bestFitIndex);
    } else {
        printf("Process of size %d cannot be allocated using Best Fit\n", processSize);
    }
}

// Function to allocate memory using Worst Fit strategy
void worstFit(struct MemoryBlock *memory, int numBlocks, int processSize) {
    int worstFitIndex = -1;
    int worstFitSize = -1;

    for (int i = 0; i < numBlocks; i++) {
        if (!memory[i].allocated && memory[i].size >= processSize) {
            if (memory[i].size > worstFitSize) {
                worstFitSize = memory[i].size;
                worstFitIndex = i;
            }
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].allocated = 1;
        printf("Process of size %d allocated in block %d using Worst Fit\n", processSize, worstFitIndex);
    } else {
        printf("Process of size %d cannot be allocated using Worst Fit\n", processSize);
    }
}

int main() {
    int numBlocks;
    printf("Enter the number of memory blocks: ");
    scanf("%d", &numBlocks);

    struct MemoryBlock *memory = (struct MemoryBlock *)malloc(numBlocks * sizeof(struct MemoryBlock));

    // Initialize memory
    initializeMemory(memory, numBlocks);

    int choice, processSize;

    do {
        // Display menu
        printf("\nMemory Allocation Strategies:\n");
        printf("1. First Fit\n");
        printf("2. Best Fit\n");
        printf("3. Worst Fit\n");
        printf("4. Display Memory\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the size of the process to allocate: ");
                scanf("%d", &processSize);
                firstFit(memory, numBlocks, processSize);
                break;
            case 2:
                printf("Enter the size of the process to allocate: ");
                scanf("%d", &processSize);
                bestFit(memory, numBlocks, processSize);
                break;
            case 3:
                printf("Enter the size of the process to allocate: ");
                scanf("%d", &processSize);
                worstFit(memory, numBlocks, processSize);
                break;
            case 4:
                displayMemory(memory, numBlocks);
                break;
            case 0:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 0);

    free(memory); // Free allocated memory

    return 0;
}
