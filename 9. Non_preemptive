#include <stdio.h>
#include <stdlib.h>

struct Process {
    int processID;
    int priority;
    int burstTime;
};

void swap(struct Process *xp, struct Process *yp) {
    struct Process temp = *xp;
    *xp = *yp;
    *yp = temp;
}

void sortProcesses(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].priority < processes[j + 1].priority) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

void calculateTimes(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    waitingTime[0] = 0;
    turnaroundTime[0] = processes[0].burstTime;

    for (int i = 1; i < n; i++) {
        waitingTime[i] = turnaroundTime[i - 1];
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }
}

void calculateAverages(int waitingTime[], int turnaroundTime[], int n, float *averageWaitingTime, float *averageTurnaroundTime) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    *averageWaitingTime = (float)totalWaitingTime / n;
    *averageTurnaroundTime = (float)totalTurnaroundTime / n;
}

void displaySchedule(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    printf("Process\tPriority\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].priority, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter priority for process %d: ", i + 1);
        scanf("%d", &processes[i].priority);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    int waitingTime[n];
    int turnaroundTime[n];

    sortProcesses(processes, n);
    calculateTimes(processes, n, waitingTime, turnaroundTime);

    printf("\nNon-Preemptive Priority-Based Schedule:\n");
    displaySchedule(processes, n, waitingTime, turnaroundTime);

    float averageWaitingTime, averageTurnaroundTime;
    calculateAverages(waitingTime, turnaroundTime, n, &averageWaitingTime, &averageTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);

    return 0;
}
