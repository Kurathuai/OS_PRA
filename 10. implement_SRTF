#include <stdio.h>
#include <stdlib.h>

struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};

void sortProcesses(struct Process processes[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (processes[j].burstTime > processes[j + 1].burstTime) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
}

int findShortestProcess(struct Process processes[], int n, int currentTime) {
    int shortestIndex = -1;
    int shortestTime = INT_MAX;

    for (int i = 0; i < n; i++) {
        if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime < shortestTime && processes[i].remainingTime > 0) {
            shortestIndex = i;
            shortestTime = processes[i].remainingTime;
        }
    }

    return shortestIndex;
}

void calculateTimes(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    int currentTime = 0;
    int remainingProcesses = n;

    while (remainingProcesses > 0) {
        int shortestIndex = findShortestProcess(processes, n, currentTime);

        if (shortestIndex == -1) {
            currentTime++;
        } else {
            processes[shortestIndex].remainingTime--;

            if (processes[shortestIndex].remainingTime == 0) {
                remainingProcesses--;
                turnaroundTime[shortestIndex] = currentTime + 1 - processes[shortestIndex].arrivalTime;
                waitingTime[shortestIndex] = turnaroundTime[shortestIndex] - processes[shortestIndex].burstTime;
            }

            currentTime++;
        }
    }
}

void calculateAverages(int waitingTime[], int turnaroundTime[], int n, float *averageWaitingTime, float *averageTurnaroundTime) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    *averageWaitingTime = (float)totalWaitingTime / n;
    *averageTurnaroundTime = (float)totalTurnaroundTime / n;
}

void displaySchedule(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].processID, processes[i].arrivalTime, processes[i].burstTime, waitingTime[i], turnaroundTime[i]);
    }
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d", &processes[i].arrivalTime);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
        processes[i].remainingTime = processes[i].burstTime;
    }

    int waitingTime[n];
    int turnaroundTime[n];

    sortProcesses(processes, n);
    calculateTimes(processes, n, waitingTime, turnaroundTime);

    printf("\nSRTF Schedule:\n");
    displaySchedule(processes, n, waitingTime, turnaroundTime);

    float averageWaitingTime, averageTurnaroundTime;
    calculateAverages(waitingTime, turnaroundTime, n, &averageWaitingTime, &averageTurnaroundTime);
    printf("\nAverage Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);

    return 0;
}
